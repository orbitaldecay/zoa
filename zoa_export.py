#!/usr/bin/python3
"""
Script for exporting zoa as other types.

Zoa is part of the civboot.org project and is released to the public domain
or licensed MIT under your discression. Modify this file in any way you wish.
Contributions are welcome.
"""
import argparse
import sys

import zoa
from zoa import utf8

argP = argparse.ArgumentParser(
  description='zoa exporter. Auto-generate code types and constants from zoa.')
argP.add_argument('tys', help="Path/s to file or directory.")
argP.add_argument('export',  help="Path to export file.")
argP.add_argument('--lang', default='C', help="Path to export file.")

HEADER = '''
* This file was auto-generated by zoa_export.py
* DO NOT EDIT MANUALLY
*/

#include "civ.h"\n
'''

def cStruct(s: zoa.StructBase):
  out = ["typedef struct {"]
  for name, f in s._fields.items():
    out.append(f"  {utf8(f.ty.name)} {utf8(name)};")
  out.append("}  " + utf8(s.name) + ";")
  out =  '\n'.join(out)
  print(out)
  return out

# Native types and what to convert them to when creating functions.
NATIVE_TYS = {'U1': 'U1', 'U2': 'U4', 'U4': 'U4'}

def cTx(ty, field):
  """Generate transmission code for a field."""
  ty = utf8(ty)
  field = 't->' + utf8(field)
  if ty in NATIVE_TYS: ty = NATIVE_TYS[ty]
  else:                field = '&' + field
  return f'{ty}_txZoab(r, {field})'

def cStructTx(s: zoa.StructBase):
  out = ['void  {ty}_txZoab(Ring* r, {ty}* t) {{'.format(ty=utf8(s.name))]
  for field, f in s._fields.items():
    tx = cTx(f.ty.name, field)
    out.append(f"  {tx};")
  out.append("}")
  return '\n'.join(out)

def cWrite(ty, field):
  """Generate writer code for a field."""

def cStructDbg(s: zoa.StructBase):
  out = ['void  {ty}_dbg(Writer* w, {ty}* t) {{'.format(ty=utf8(s.name))]
  for field, f in s._fields.items():
    tx = cTx(f.ty.name, field)
    out.append(f"  {tx};")
  out.append("}")
  return '\n'.join(out)

def exportConstants(f, vals):
  for k, v in vals.items():
    f.write(f'#define {k:<20}  0x{v:02X}\n')
  f.write('\n')

def exportStructs(f, tys):
  for key, s in tys.items():
    if not issubclass(s, zoa.StructBase):
      continue
    print("is subclass:", s)
    f.write(cStruct(s))
    f.write('\n\n')

def exportC(tys, vals, export, zty):
  with open(export + '.h', 'w') as f:
    f.write(f"/* Generated from {zty}, see documentation there.\n")
    f.write(HEADER)
    exportConstants(f, vals)
    exportStructs(f, tys)


def main(argv):
  print(argv)
  args = argP.parse_args()
  r = zoa.parse(args.tys)
  exportC(r.tys, r.vals, args.export, args.tys)


if __name__ == '__main__':
  main(sys.argv)
