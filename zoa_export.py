#!/usr/bin/python3
"""
Script for exporting zoa as other types.

Zoa is part of the civboot.org project and is released to the public domain
or licensed MIT under your discression. Modify this file in any way you wish.
Contributions are welcome.
"""
import argparse
import sys

import zoa
from zoa import utf8

argP = argparse.ArgumentParser(
  description='zoa exporter. Auto-generate code types and constants from zoa.')
argP.add_argument('tys', help="Path/s to file or directory.")
argP.add_argument('export',  help="Path to export file.")
argP.add_argument('--lang', default='C', help="Path to export file.")

HEADER = '''/*
* This file was auto-generated by zoa_export.py
* DO NOT EDIT MANUALLY
*/

#include "civ/civ.h"\n
'''

def cStruct(s: zoa.StructBase):
  out = ["typedef struct {"]
  for name, f in s._fields.items():
    out.append(f"  {utf8(f.ty.name)} {utf8(name)};")
  out.append("}  " + utf8(s.name) + ";")
  out =  '\n'.join(out)
  print(out)
  return out

"""
MyStruct MyStruct_fromZoa(File f) {
  
}
"""
def cStructMethods(s: zoa.StructBase):
  out = ['{ty}  {ty}_fromZoab(File f) {'.format(ty=s.name)]


def export_structs(f, tys):
  for key, s in tys.items():
    if not issubclass(s, zoa.StructBase):
      continue
    print("is subclass:", s)
    f.write(cStruct(s))
    f.write('\n\n')

def export_C(tys, export):
  with open(export + '.h', 'w') as f:
    f.write(HEADER)
    export_structs(f, tys)


def main(argv):
  print(argv)
  args = argP.parse_args()
  tys = zoa.parse(args.tys)
  print(tys)
  export_C(tys, args.export)


if __name__ == '__main__':
  main(sys.argv)
